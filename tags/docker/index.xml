<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Reid&#39;s Blog</title>
    <link>https://reid00.github.io/tags/docker/</link>
    <description>Recent content in Docker on Reid&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 16 Mar 2023 19:35:02 +0800</lastBuildDate><atom:link href="https://reid00.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker笔记</title>
      <link>https://reid00.github.io/posts/langs_linux/docker%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 16 Mar 2023 19:35:02 +0800</pubDate>
      
      <guid>https://reid00.github.io/posts/langs_linux/docker%E7%AC%94%E8%AE%B0/</guid>
      <description>一、概述 1.1 基本概念： Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Nginx等打包到一个容器中，然后部署到任意你想部署到的环境。
1.2 对比虚拟机与Docker Docker守护进程可以直接与主操作系统进行通信，为各个Docker容器分配资源；它还可以将容器与主操作系统隔离，并将各个容器互相隔离。虚拟机启动需要数分钟，而Docker容器可以在数毫秒内启动。由于没有臃肿的从操作系统，Docker可以节省大量的磁盘空间以及其他系统资源。
说了这么多Docker的优势，大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而Docker通常用于隔离不同的应用，例如前端，后端以及数据库。
1.3 与传统VM特性对比： 特性 容器 虚拟机 启动速度 秒级 分钟级 硬盘使用 一般为MB 一般为GB 性能 接近原生 弱于原生 系统支持量 单机支持上千个容器 一般几十个 隔离性 安全隔离 完全隔离 1.4 Docker组件 docker Client客户端————&amp;gt;向docker服务器进程发起请求，如:创建、停止、销毁容器等操作
docker Server服务器进程—–&amp;gt;处理所有docker的请求，管理所有容器
docker Registry镜像仓库——&amp;gt;镜像存放的中央仓库，可看作是存放二进制的scm
1.5 Docker的三个概念 镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个Ubuntu镜像就是一个包含Ubuntu操作系统环境的模板，同理在该镜像上装上Apache软件，就可以称为Apache镜像。 容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。 仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（12.04、14.04等）的Ubuntu镜像。 二、安装Docker 2.1 Ubuntu 旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本：
1 $ sudo apt-get remove docker docker-engine docker.io 使用 APT 安装 1 2 3 $ sudo apt-get update $ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common Docker CE 镜像源站 使用官方安装脚本自动安装 （仅适用于公网环境） 1 curl -fsSL https://get.</description>
    </item>
    
    <item>
      <title>Dockerfile案例</title>
      <link>https://reid00.github.io/posts/langs_linux/dockerfile%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Thu, 16 Mar 2023 19:35:01 +0800</pubDate>
      
      <guid>https://reid00.github.io/posts/langs_linux/dockerfile%E6%A1%88%E4%BE%8B/</guid>
      <description>一、DockerHub 官网链接 https://hub.docker.com/
二、Dockerfile 关键字 注意: dockerfile 的关键字必须都是大写才能使用
FROM
指定基础镜像，当前新镜像是基于哪个镜像的。其中，scratch是个空镜像，这个镜像是虚拟的概念,并不实际存在,它表示一个空白的镜像，当前镜像没有依赖于其他镜像
1 FROM scratch MAINTAINTER
镜像维护者的姓名和邮箱地址
1 MAINTAINER Sixah &amp;lt;sixah@163.com&amp;gt; RUN
容器构建时需要运行的命令
1 RUN echo &amp;#39;Hello, Docker!&amp;#39; EXPOSE
当前容器对外暴露出的端口
1 EXPOSE 8080 注意：
-p 和 expose 区别
-p 80:8080
外部80 端口转向 向外暴露是 8080 端口的 Docker 容器。如果只写 -p 80 ，那么当作是 -p 80:80。也就是说，容器之间可以访问该 暴露8080端口的容器，其他用户也可以访问
exposes 80
​ 表示 容器之间可以访问该 暴露80端口的容器，但是其他用户不可以可以访问。这样其实就是做到了 封闭。
WORKDIR
指定在创建容器后，终端默认登陆进来的工作目录，一个落脚点
1 WORKDIR /home/ ENV
用来在构建镜像过程中设置环境变量
1 ENV MY_PATH /usr/mytest 这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样;当然，也可以在其他指令中直接使用这些环境变量，比如：WORKDIR $MY_PATH</description>
    </item>
    
  </channel>
</rss>
