<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Storage on Reid&#39;s Blog</title>
    <link>https://reid00.github.io/categories/storage/</link>
    <description>Recent content in Storage on Reid&#39;s Blog</description>
    <image>
      <url>https://i.loli.net/2021/09/26/3OMGXylm8HUYJ6p.png</url>
      <link>https://i.loli.net/2021/09/26/3OMGXylm8HUYJ6p.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Jun 2022 14:28:50 +0800</lastBuildDate><atom:link href="https://reid00.github.io/categories/storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SStable</title>
      <link>https://reid00.github.io/post/sstable/</link>
      <pubDate>Wed, 08 Jun 2022 14:28:50 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/sstable/</guid>
      <description>概述 如我们之前提到的，leveldb是典型的LSM树(Log Structured-Merge Tree)实现，即一次leveldb的写入过程并不是直接将数据持久化到磁盘文件</description>
    </item>
    
    <item>
      <title>RocksDB</title>
      <link>https://reid00.github.io/post/rocksdb/</link>
      <pubDate>Wed, 08 Jun 2022 14:21:12 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/rocksdb/</guid>
      <description>简介 RocksDB 是由 Facebook 基于 LevelDB 开发的一款提供键值存储与读写功能的 LSM-tree 架构引擎。用户写入的键值对会先写入磁盘上的 WAL (Write Ahead Log)，然后再写入内存中的跳表（Sk</description>
    </item>
    
    <item>
      <title>LSM Tree</title>
      <link>https://reid00.github.io/post/lsm-tree/</link>
      <pubDate>Wed, 08 Jun 2022 14:20:05 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/lsm-tree/</guid>
      <description>简介LSM Tree MySQL、etcd 等存储系统都是面向读多写少场景的，其底层大都采用 B-Tree 及其变种数据结构。而 LSM-Tree 则解决了另一个应用场景——写多读少时</description>
    </item>
    
    <item>
      <title>RAFT</title>
      <link>https://reid00.github.io/post/raft/</link>
      <pubDate>Wed, 08 Jun 2022 14:19:19 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/raft/</guid>
      <description>Raft 协议介绍 为了让一致性协议变得简单可理解，Raft协议主要使用了两种策略。一是将复杂问题进行分解，在Raft协议中，一致性问题被分解为：le</description>
    </item>
    
    <item>
      <title>ES面试题</title>
      <link>https://reid00.github.io/post/es%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 08 Jun 2022 14:15:28 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/es%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>ElasticSearch面试题 1.为什么要使用Elasticsearch? 因为在我们商城中的数据，将来会非常多，所以采用以往的模糊查询，模</description>
    </item>
    
    <item>
      <title>MySql事务</title>
      <link>https://reid00.github.io/post/mysql%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Wed, 08 Jun 2022 11:52:57 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/mysql%E4%BA%8B%E5%8A%A1/</guid>
      <description>『浅入深出』MySQL 中事务的实现 https://draveness.me/mysql-transaction/ MySQL 中如何实现事务隔离 https://www.cnblogs.com/fengzheng/p/12557762.html 详解一条 SQL 的执行过程 https://juejin.cn/post/6931606328129355790 首先说读未提交，它是性能最好，也可以说它是最野蛮的方式，因为</description>
    </item>
    
    <item>
      <title>MySql索引优化</title>
      <link>https://reid00.github.io/post/mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 08 Jun 2022 11:04:01 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</guid>
      <description>数据库表结构： 1 2 3 4 5 6 7 8 9 create table user ( id int primary key, name varchar(20), sex varchar(5), index(name) )engine=innodb; select id,name where name=&amp;#39;shenjian&amp;#39; select id,name,sex where name=&amp;#39;shenjian&amp;#39; 多查询了一个属性，为何检索过程完全不同？ 什么是回表查询？ 什么是索</description>
    </item>
    
    <item>
      <title>MySql索引介绍</title>
      <link>https://reid00.github.io/post/mysql%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 08 Jun 2022 11:02:52 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/mysql%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>什么是索引，索引的作用 当我们要在新华字典里查某个字（如「先」）具体含义的时候，通常都会拿起一本新华字典来查，你可以先从头到尾查询每一页是否有</description>
    </item>
    
    <item>
      <title>MySql高频面试问题</title>
      <link>https://reid00.github.io/post/mysql%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 08 Jun 2022 11:00:46 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/mysql%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid>
      <description>本文主要受众为开发人员,所以不涉及到MySQL的服务部署等操作,且内容较多,大家准备好耐心和瓜子矿泉水。 前一阵系统的学习了一下MySQL,也</description>
    </item>
    
    <item>
      <title>Mysql优化</title>
      <link>https://reid00.github.io/post/mysql%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 08 Jun 2022 10:07:53 +0800</pubDate>
      
      <guid>https://reid00.github.io/post/mysql%E4%BC%98%E5%8C%96/</guid>
      <description>一，SQL语句性能优化 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 应尽量避免在 where 子句中对字段进行 null 值判断，创</description>
    </item>
    
  </channel>
</rss>
